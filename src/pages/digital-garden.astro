---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

import Posts from "@components/Posts.astro";
import Post from "@components/Post.astro";
import Layout from "@layouts/Layout.astro";
import { sortPosts } from "@utilities/sortPosts";
import Filters from "@components/Filters.astro";

const posts = await getCollection("thoughts");
const nonDraftPosts = sortPosts(posts).filter((post) => !post.data.draft);
---

<Layout title="Digital garden">
  <p>
    This digital garden is where I share reflections, sowing seeds of thought
    that can be cultivated and nutured into fruitful structured writing.
  </p>
  <p>
    Inspired by <a href="https://nesslabs.com/digital-garden-set-up">
      Anne-Laure Le Cunff
    </a>, <a href="https://maggieappleton.com/garden-history">
      Maggie Appleton
    </a> and <a
      href="https://twitter.com/Mappletons/status/1250532315459194880"
    >
      others
    </a>, this is not a chronological blog but an evergreen place where ideas
    can be edited and refined.
  </p>
  <p>
    It is better to work in the open and be comfortable with iterative progress,
    than wait for the big reveal...
  </p>

  <Filters />

  <Posts>
    {nonDraftPosts.map((post: CollectionEntry<"thoughts">) => (
      <Post
        slug={`/thoughts/${post.slug}.html`}
        title={post.data.title}
        description={post.data.description}
        lastEdited={post.data.lastEdited}
        drawing={post.data.stage}
        tag={post.data.tag}
      />
    ))}
  </Posts>
  <script is:inline>
    const url = new URL(window.location.href);
    const posts = document.querySelectorAll("[data-post]");
    const stages = ["note", "essay", "reflection"];

    const filterPosts = () => posts.forEach(post => {
      if ((post.getAttribute("data-tag") === url.searchParams.get("tags") || url.searchParams.get("tags") === "all") && url.searchParams.get(post.getAttribute("data-stage") + "s") === "true") {
        post.removeAttribute('hidden');
      } else {
        post.setAttribute('hidden', 'true');
      }
    });

    const handleButton = (tag) => {
      const thisButton = document.getElementById(`button-${tag}`);
      const allButtons = document.querySelectorAll('[id^="button-"]');
      allButtons.forEach(button => button.removeAttribute('disabled'));
      thisButton.setAttribute('disabled', true)
      url.searchParams.set("tags", tag);
      history.pushState({}, '', url.toString());
      filterPosts();
    }

    const filterContainer = document.getElementById("filters");
    const buttonGroup = document.createElement("div");
    filterContainer.appendChild(buttonGroup);
    const stageFilterContainer = document.getElementById("stage");  
    const tags = ["all", "innovation", "self-management"];
    tags.map(tag => {
      const button = document.createElement("button");
      button.innerText = tag;
      buttonGroup.appendChild(button);
      button.id = `button-${tag}`

      button.addEventListener('click', () => handleButton(tag));
      button.addEventListener('keydown', event => {
        if (event.keyCode === 13) handleButton(tag);
      })
      button.addEventListener('keyup', event => {
        if (event.keyCode === 32) handleButton(tag);
      })
      if (tag === "all") button.disabled = true;
    })
    
    stages.map((stage) => {
      const label = document.createElement("label");
      label.setAttribute("for", `${stage}Checkbox`);
      const checkbox = document.createElement("input");
      checkbox.type = "checkbox";
      checkbox.name = `${stage}Checkbox`;
      checkbox.checked = stage === "note" ? false : true;
      
      checkbox.addEventListener("change", () => {
        if (checkbox.checked) {
          url.searchParams.set(stage + "s", "true");
          history.pushState({}, '', url.toString());
        } else {
          url.searchParams.set(stage + "s", "false");
          history.pushState({}, '', url.toString());
        }
        filterPosts();
      });
      const stageFilterSpan = document.getElementById(`${stage}-label`);
      stageFilterContainer.appendChild(label);
      label.appendChild(checkbox);
      label.appendChild(stageFilterSpan);
    });
  
    filterContainer.setAttribute("aria-role", "group");
    filterContainer.setAttribute("aria-label", "filter controls");
  
    filterPosts();
  </script>
  
</Layout>
