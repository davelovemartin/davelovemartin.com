---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

import Posts from "@components/Posts.astro";
import Post from "@components/Post.astro";
import Layout from "@layouts/Layout.astro";
import { sortPosts } from "@utilities/sortPosts";
import StageKey from "@components/StageKey.astro";

import { tags } from "../content/config";
import TagFilterButtonGroup from "@components/TagFilterButtonGroup.astro";
import TagFilterButton from "@components/TagFilterButton.astro";
import NotesToggle from "@components/NotesToggle.astro";
import Stack from "@components/Stack.astro";

const posts = await getCollection("thoughts");
const nonDraftPosts = sortPosts(posts).filter((post) => !post.data.draft);
---

<Layout title="Digital garden">
  <p>
    This digital garden is where I share reflections, sowing seeds of thought
    that can be cultivated and nutured into fruitful structured writing.
  </p>
  <p>
    Inspired by <a href="https://nesslabs.com/digital-garden-set-up">
      Anne-Laure Le Cunff
    </a>, <a href="https://maggieappleton.com/garden-history">
      Maggie Appleton
    </a> and <a
      href="https://twitter.com/Mappletons/status/1250532315459194880"
    >
      others
    </a>, this is not a chronological blog but an evergreen place where ideas
    can be edited and refined.
  </p>

  <p>
    It is better to work in the open and be comfortable with iterative progress,
    than wait for the big reveal...
  </p>

  <Stack>
    <TagFilterButtonGroup>
      <TagFilterButton title="all" isDisabled={true} />
      {tags.map((tag) => <TagFilterButton title={tag} isDisabled={false} />)}
    </TagFilterButtonGroup>

    <NotesToggle name="toggle" />
    <StageKey />
  </Stack>
  <Posts>
    {nonDraftPosts.map((post: CollectionEntry<"thoughts">) => (
      <Post
        slug={`/thoughts/${post.slug}.html`}
        title={post.data.title}
        description={post.data.description}
        lastEdited={post.data.lastEdited}
        drawing={post.data.stage}
        tag={post.data.tag}
      />
    ))}
  </Posts>
  <script>
    document.addEventListener("astro:page-load", () => {
      const url = new URL(window.location.href);
      const posts = document.querySelectorAll("[data-post]");

      unhideInteractiveElements();
      addEventListenersToButtons();
      addEventListenersToCheckBox();
      filterPosts();

      function unhideInteractiveElements() {
        document
          .getElementById("tag-filter-button-group")
          ?.removeAttribute("hidden");
        document.getElementById("notes-toggle")?.removeAttribute("hidden");
      }

      function addEventListenersToButtons() {
        document
          .querySelectorAll('[id^="tag-button-"]')
          .forEach(function (currentValue) {
            addButtonListener(currentValue);
          });
      }

      function addButtonListener(tagFilterButton) {
        const tag = tagFilterButton.innerHTML.toString().trim();
        tagFilterButton.addEventListener("click", () => handleButton(tag));
        tagFilterButton.addEventListener("keydown", (event) => {
          if (event.keyCode === 13) handleButton(tag);
        });
        tagFilterButton.addEventListener("keyup", (event) => {
          if (event.keyCode === 32) handleButton(tag);
        });
      }

      function handleButton(tag) {
        enableButtons();
        disableTagButton(tag);
        setURLSearchParam("tags", tag);
        filterPosts();
      }

      function enableButtons() {
        document
          .querySelectorAll('[id^="tag-button-"]')
          .forEach((button) => button.removeAttribute("disabled"));
      }

      function disableTagButton(tag) {
        document
          .getElementById(`tag-button-${tag}`)
          ?.setAttribute("disabled", "true");
      }

      function setURLSearchParam(param, tag) {
        url.searchParams.set(param, tag);
        history.pushState({}, "", url.toString());
      }

      function addEventListenersToCheckBox() {
        const toggleNotesCheckbox = document.getElementById("toggle");
        toggleNotesCheckbox?.addEventListener("change", () =>
          handleChange(toggleNotesCheckbox)
        );
      }

      function handleChange(toggleNotesCheckbox) {
        setURLSearchParam("notes", toggleNotesCheckbox.checked.toString());
        filterPosts();
      }

      function filterPosts() {
        posts.forEach((post) => {
          isPostFiltered(post)
            ? post.removeAttribute("hidden")
            : post.setAttribute("hidden", "true");
        });
      }

      function isPostFiltered(post) {
        return isPostFilteredByTag(post) && isPostFilteredByNotes(post);
      }

      function isPostFilteredByTag(post) {
        return (
          post.getAttribute("data-tag") === url.searchParams.get("tags") ||
          url.searchParams.get("tags") === "all"
        );
      }

      function isPostFilteredByNotes(post) {
        return (
          (url.searchParams.get("notes") === "true" &&
            post.getAttribute("data-stage") + "s" === "notes") ||
          post.getAttribute("data-stage") + "s" !== "notes"
        );
      }
    });
  </script>
</Layout>
